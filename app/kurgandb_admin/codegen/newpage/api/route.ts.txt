import { NextPOST, ResponseError } from "@artempoletsky/easyrpc";
import { NextRequest, NextResponse } from "next/server";
import * as schemas from "./schemas";
import type { ASayHello, ARegister } from "./schemas";
import { methodFactory, query } from "@/db";
import { revalidateTag } from "next/cache";



async function sayHello({ name }: ASayHello) {
  if (name == "")
    throw new ResponseError("Name is empty!");

  return `Hello, ${name}!`;
}
export type FSayHello = typeof sayHello;
////////////////////////////////////////////////////


const register = methodFactory(({ users }, { username, password }: ARegister, { $ }) => {
  const draft = users.getDocumentDraft();
  users.insert({
    ...draft,
    username,
    password: $.encodePassword(password),
  });
  return users.at(username);
}, (user) => {
  // send email confirmation letter
  return user;
});
export type FRegister = typeof register;
////////////////////////////////////////////////////


export const POST = NextPOST(NextResponse, schemas, {
  register,
  sayHello,
});


export async function GET(req: NextRequest) {
  const dbVersion = await query(({ }, { }, { db }) => {
    return db.version;
  });
  setTimeout(() => { // Next.js revalidation hack
    revalidateTag("page");
  }, 200);
  return NextResponse.json(dbVersion);
}

